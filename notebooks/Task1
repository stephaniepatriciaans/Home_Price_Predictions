from pathlib import Path
import pandas as pd
import numpy as np
import glob
import matplotlib.pyplot as plt
import seaborn as sns

data_path = Path("../data")

csv_files = glob.glob(str(data_path / "CRMLSSold*.csv"))
print("Found CSVs:", [Path(f).name for f in csv_files])

if not csv_files:
    raise FileNotFoundError(f"No CRMLSSold*.csv files found in {data_path.resolve()}")

# Merge all monthly CRMLS datasets
df_list = [pd.read_csv(f) for f in csv_files]
df_all_raw = pd.concat(df_list, ignore_index=True)
print("Merged shape:", df_all_raw.shape)

# Save merged dataset
output_path = data_path / "all_raw.csv"
df_all_raw.to_csv(output_path, index=False)
print(f"Saved merged dataset → {output_path}")

df_all = df_all_raw.copy()
if {"PropertyType", "PropertySubType"}.issubset(df_all.columns):
    df_all["PropertySubType"] = df_all["PropertySubType"].astype(str)
    mask_pt = df_all["PropertyType"].str.contains("residential", case=False, na=False)
    mask_ps = df_all["PropertySubType"].str.contains("single", case=False, na=False)
    df_all = df_all[mask_pt & mask_ps]

# Resolve target (Close Price)
target_candidates = ["ClosePrice", "Close Price", "Close_Price", "CLOSEPRICE"]
target = next((c for c in target_candidates if c in df_all.columns), None)
assert target is not None, f"Target not found. Tried: {target_candidates}"

# >>> ListPrice resolution
listprice_candidates = ["ListPrice", "List Price", "List_Price", "LISTPRICE"]
lp = next((c for c in listprice_candidates if c in df_all.columns), None)

orig_lp_candidates = ["OriginalListPrice", "Original List Price", "Original_List_Price", "ORIGINALLISTPRICE"]
orig_lp = next((c for c in orig_lp_candidates if c in df_all.columns), None)

if lp:
    df_all[lp] = pd.to_numeric(df_all[lp], errors="coerce")
if orig_lp:
    df_all[orig_lp] = pd.to_numeric(df_all[orig_lp], errors="coerce")

# Keep reasonable target range & non-null
df_all = df_all[df_all[target].between(50_000, 10_000_000)]
df_all = df_all.dropna(subset=[target])
print("After removing outliers & NaNs:", df_all.shape)

LOW, HIGH = 50_000, 10_000_000
n0 = len(df_all)
df_all = df_all[df_all[target].between(LOW, HIGH)]
print(f"Trimmed extreme {target} values: {n0 - len(df_all)} rows removed "
      f"(kept in [{LOW:,} .. {HIGH:,}])")

# Bound ListPrice similarly but don't drop rows—just null implausible
if lp:
    n_before = df_all[lp].notna().sum()
    df_all.loc[~df_all[lp].between(LOW, HIGH), lp] = np.nan
    print(f"ListPrice: set {n_before - df_all[lp].notna().sum()} extreme values to NaN (kept in [{LOW:,} .. {HIGH:,}])")

# Resolve living area column once
living_candidates = ["LivingArea", "Living Area", "SQFT", "SquareFootage", "Square_Footage"]
living = next((c for c in living_candidates if c in df_all.columns), None)

# Price per sqft using resolved living area
if living:
    df_all["PricePerSqft"] = df_all[target] / df_all[living].clip(lower=1)
    # Clip extreme PPSF tail
    df_all["PricePerSqft"] = df_all["PricePerSqft"].clip(upper=df_all["PricePerSqft"].quantile(0.99))
    print(f"Added PricePerSqft (living column: {living})")

# ListPrice-per-sqft
if lp and living:
    df_all["ListPricePerSqft"] = df_all[lp] / df_all[living]
    df_all["ListPricePerSqft"].replace([np.inf, -np.inf], np.nan, inplace=True)
    p99_lp_psf = df_all["ListPricePerSqft"].quantile(0.99)
    df_all["ListPricePerSqft"] = df_all["ListPricePerSqft"].clip(upper=p99_lp_psf)
    print("ListPricePerSqft 99th percentile:", round(p99_lp_psf, 2))

# Deal-level LP vs SP metrics
if lp:
    df_all["LP_to_SP_Ratio"] = df_all[target] / df_all[lp]
    df_all["PriceDelta"] = df_all[target] - df_all[lp]
    df_all["PricePctDiff"] = (df_all["PriceDelta"] / df_all[lp]).replace([np.inf, -np.inf], np.nan)

# Freeze cleaned dataset
df_clean = df_all.reset_index(drop=True)
output_file = data_path / "cleaned_enhanced.csv"
df_clean.to_csv(output_file, index=False)
print(f"Saved cleaned dataset → {output_file} | Shape: {df_clean.shape}")

# Missingness (on the saved dataset)
missing_pct = (
    df_clean.isna().mean().sort_values(ascending=False).mul(100).round(1)
)
miss_tbl = missing_pct[missing_pct > 0].head(15).to_frame("Missing %")
display(miss_tbl)

# ==================== PLOTS ====================

# Distribution of Close Prices
plt.figure(figsize=(8,5))
ax = sns.histplot(df_clean[target], bins=50, kde=True, color="blue")
for line in ax.lines:
    line.set_color("red")
    line.set_linewidth(2)
plt.title("Distribution of Close Prices")
plt.xlabel("Close Price ($)")
plt.ylabel("Count")
plt.show()

# Living Area vs Close Price (using resolved living column when present)
x_col = living if living else "LivingArea"
if x_col in df_clean.columns:
    plt.figure(figsize=(8,5))
    sns.scatterplot(x=x_col, y=target, data=df_clean, alpha=0.3)
    plt.title(f"{x_col} vs {target}")
    plt.xlabel(f"{x_col} (sqft)" if ("Area" in x_col or "SQFT" in x_col) else x_col)
    plt.ylabel(f"{target} ($)")
    plt.show()

# List Price vs Close Price + LP/SP ratio
if lp:
    plt.figure(figsize=(8,5))
    sns.scatterplot(x=df_clean[lp], y=df_clean[target], alpha=0.3)
    plt.title("List Price vs Close Price")
    plt.xlabel("List Price ($)")
    plt.ylabel("Close Price ($)")
    plt.plot(
        [df_clean[lp].min(), df_clean[lp].max()],
        [df_clean[lp].min(), df_clean[lp].max()],
        linestyle="--", linewidth=1, color="gray"
    )
    plt.show()

    if "LP_to_SP_Ratio" in df_clean.columns:
        plt.figure(figsize=(8,5))
        sns.histplot(df_clean["LP_to_SP_Ratio"].dropna(), bins=50, kde=True)
        plt.title("LP-to-SP Ratio (ClosePrice / ListPrice)")
        plt.xlabel("Ratio")
        plt.ylabel("Count")
        plt.show()
